{"version":3,"sources":["components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/Form/Form.module.css","components/Container/Container.js","components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","Container","children","className","styles","container","defaultProps","Form","state","name","number","id","handleChange","event","currentTarget","value","setState","shortid","generate","handleSubmit","preventDefault","console","log","props","onSubmit","reset","this","form","input","type","onChange","pattern","title","required","button","Component","ContactList","contacts","onDeleteContact","ul","map","contact","p","onClick","Filter","App","filter","addContact","find","toLowerCase","alert","deleteContact","contactId","prevState","changeFilter","getFilterContact","normaFilter","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filterContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c38aff79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2QWgM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"ContactList_ul__3pBBp\",\"contact\":\"ContactList_contact__2DnsG\",\"p\":\"ContactList_p___O6ya\",\"button\":\"ContactList_button__3rGj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2XjqU\",\"input\":\"Form_input__1klLZ\",\"button\":\"Form_button__1Pvn3\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={styles.container}>{children}</div>\r\n);\r\n\r\nContainer.defaultProps = {\r\n  children: [],\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;\r\n","import { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport styles from './Form.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    id: '',\r\n  };\r\n\r\n  //унифицированный метод, обновляющий стейт\r\n  handleChange = event => {\r\n    // console.log(event.currentTarget.name);\r\n    // console.log(event.currentTarget.value);\r\n    // this.setState({ [event.currentTarget.name]: event.currentTarget.value });\r\n\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value, id: shortid.generate() });\r\n  };\r\n  //метод отправки формы\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(this.state);\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  //очистка формы\r\n  reset = () => {\r\n    this.setState({ id: '', name: '', number: '' });\r\n  };\r\n  render() {\r\n    //диструктуризация\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.form}>\r\n        <label>\r\n          Name{' '}\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number{' '}\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\nexport default Form;\r\n","import React from 'react';\r\nimport styles from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className={styles.ul}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.contact}>\r\n          <p className={styles.p}>{name}: </p>\r\n          <p className={styles.p}>{number}</p>\r\n          <button onClick={() => onDeleteContact(id)} className={styles.button}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label>\r\n      Find contact by name{' '}\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport Container from \"./components/Container\";\nimport Form from \"./components/Form\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  //добавляет контакт\n  addContact = ({ id, name, number }) => {\n    const { contacts } = this.state;\n    const contact = {\n      id,\n      name,\n      number,\n    };\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n  };\n\n  // удаляет контакт\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n  //значение фильтра записываем в стейт\n  changeFilter = (event) => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n  //фильтрует контакты\n  getFilterContact = () => {\n    const { contacts, filter } = this.state;\n    const normaFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normaFilter)\n    );\n  };\n  // вызывается один раз при загрузке\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  //вызывается после изменения состояния или свойств\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n\n    const filterContacts = this.getFilterContact();\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.addContact} />\n\n        <h2>Contacts </h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={filterContacts}\n          onDeleteContact={this.deleteContact}\n          title=\"Contacts\"\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}